Method 1:Brute Force
#include<iostream>
#include<string>
using namespace std;
class Solution
{
    public:
    bool isIsomorphic(string s,string t)
    {
        if(s.length()!=t.length()) return false;
        for(int i=0;i<s.length();i++)
        {
            for(int j=0;j<s.length();j++)
            {
                if(s[i]==s[j] && t[i]!=t[j] || s[i]!=s[j] && t[i]==t[j]) return false;
            }
        }
        return true;
    }
};
int main()
{
    string s;
    cin>>s;
    string t;
    cin>>t;
    Solution sol;
    bool isisomorphic=sol.isIsomorphic(s,t);
    if(isisomorphic)
    {
        cout<<"True";
    }
    else 
    {
        cout<<"False";
    }
}

Method 2:Optimized using maps
#include<iostream>
#include<string>
#include<unordered_map>
using namespace std;
class Solution
{
    public:
    bool isIsomorphic(string s,string t)
    {
        if(s.length()!=t.length()) return false;
        unordered_map<char,char>map_s_to_t;
        unordered_map<char,char>map_t_to_s;
        for(int i=0;i<s.length();i++)
        {
            char char_s=s[i];
            char char_t=t[i];
            if(map_s_to_t.count(char_s) && map_s_to_t[char_s]!=char_t) return false;
            if(map_t_to_s.count(char_t) && map_t_to_s[char_t]!=char_s) return false;
            
            map_s_to_t[char_s]=char_t;
            map_t_to_s[char_t]=char_s;
        }
        return true;
    }
};
int main()
{
    string s;
    cin>>s;
    string t;
    cin>>t;
    Solution sol;
    bool isisomorphic=sol.isIsomorphic(s,t);
    if(isisomorphic)
    {
        cout<<"True";
    }
    else 
    {
        cout<<"False";
    }
}

Input:
egg
add

Output:
True
