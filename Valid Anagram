Method 1:Brute Force
#include<iostream>
#include<string>
#include<algorithm>
using namespace std;
class Solution
{
    public:
    bool ValidAnagram(string s,string t)
    {
        if(s.length()!=t.length()) return false;
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        return s==t;
    }
};
int main()
{
    string s;
    cin>>s;
    string t;
    cin>>t;
    Solution sol;
    bool isanagram=sol.ValidAnagram(s,t);
    if(isanagram)
    {
        cout<<"true";
    }
    else 
    {
        cout<<"false";
    }
}

Method 2:Better
#include<iostream>
#include<string>
#include<unordered_map>
using namespace std;
class Solution
{
    public:
    bool ValidAnagram(string s,string t)
    {
        if(s.length()!=t.length()) return false;
        unordered_map<char,int>mp;
        for(char ch:s) mp[ch]++;
        for(char ch:t) mp[ch]--;
        for(auto it:mp)
        {
            if(it.second!=0) return false;
        }
        return true;
    }
};
int main()
{
    string s;
    cin>>s;
    string t;
    cin>>t;
    Solution sol;
    bool isAnagram=sol.ValidAnagram(s,t);
    if(isAnagram)
    {
        cout<<"True";
    }
    else 
    {
        cout<<"False";
    }
}

Method 3:Optimized
#include<iostream>
#include<string>
using namespace std;
class Solution
{
    public:
    bool ValidAnagram(string s,string t)
    {
        if(s.length()!=t.length()) return false;
        int freq[26]={0};
        for(char ch:s) freq[ch-'a']++;
        for(char ch:t) freq[ch-'a']--;
        for(auto count:freq)
        {
            if(count!=0) return false;
        }
        return true;
    }
};
int main()
{
    string s;
    cin>>s;
    string t;
    cin>>t;
    Solution sol;
    bool isanagram=sol.ValidAnagram(s,t);
    if(isanagram)
    {
        cout<<"True";
    }
    else 
    {
        cout<<"False";
    }
}

Input:
anagram
nagaram

Output:
True
